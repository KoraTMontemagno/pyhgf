Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
with two_levels_binary_hgf:
    two_level_hgf_idata = pm.sample(chains=4)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pytensor/compile/function/types.py:972[0m, in [0;36mFunction.__call__[0;34m(self, *args, **kwargs)[0m
[1;32m    970[0m [38;5;28;01mtry[39;00m:
[1;32m    971[0m     outputs [38;5;241m=[39m (
[0;32m--> 972[0m         [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mvm[49m[43m([49m[43m)[49m
[1;32m    973[0m         [38;5;28;01mif[39;00m output_subset [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m
[1;32m    974[0m         [38;5;28;01melse[39;00m [38;5;28mself[39m[38;5;241m.[39mvm(output_subset[38;5;241m=[39moutput_subset)
[1;32m    975[0m     )
[1;32m    976[0m [38;5;28;01mexcept[39;00m [38;5;167;01mException[39;00m:

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pytensor/graph/op.py:544[0m, in [0;36mOp.make_py_thunk.<locals>.rval[0;34m(p, i, o, n, params)[0m
[1;32m    540[0m [38;5;129m@is_thunk_type[39m
[1;32m    541[0m [38;5;28;01mdef[39;00m [38;5;21mrval[39m(
[1;32m    542[0m     p[38;5;241m=[39mp, i[38;5;241m=[39mnode_input_storage, o[38;5;241m=[39mnode_output_storage, n[38;5;241m=[39mnode, params[38;5;241m=[39m[38;5;28;01mNone[39;00m
[1;32m    543[0m ):
[0;32m--> 544[0m     r [38;5;241m=[39m [43mp[49m[43m([49m[43mn[49m[43m,[49m[43m [49m[43m[[49m[43mx[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mx[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mi[49m[43m][49m[43m,[49m[43m [49m[43mo[49m[43m)[49m
[1;32m    545[0m     [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m node[38;5;241m.[39moutputs:

File [0;32m~/work/pyhgf/pyhgf/pyhgf/distribution.py:520[0m, in [0;36mHGFDistribution.perform[0;34m(self, node, inputs, outputs)[0m
[1;32m    519[0m [38;5;250m[39m[38;5;124;03m"""Run the function forward."""[39;00m
[0;32m--> 520[0m result [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mhgf_logp[49m[43m([49m[38;5;241;43m*[39;49m[43minputs[49m[43m)[49m
[1;32m    521[0m outputs[[38;5;241m0[39m][[38;5;241m0[39m] [38;5;241m=[39m np[38;5;241m.[39masarray(result, dtype[38;5;241m=[39mnode[38;5;241m.[39moutputs[[38;5;241m0[39m][38;5;241m.[39mdtype)

    [0;31m[... skipping hidden 12 frame][0m

File [0;32m~/work/pyhgf/pyhgf/pyhgf/distribution.py:201[0m, in [0;36mhgf_logp[0;34m(omega_1, omega_2, omega_3, omega_input, rho_1, rho_2, rho_3, pi_1, pi_2, pi_3, mu_1, mu_2, mu_3, kappa_1, kappa_2, input_data, response_function, model_type, n_levels, response_function_parameters, time)[0m
[1;32m    198[0m     kappas: Dict[[38;5;28mstr[39m, Optional[[38;5;28mfloat[39m]] [38;5;241m=[39m {[38;5;124m"[39m[38;5;124m1[39m[38;5;124m"[39m: kappa_1[i], [38;5;124m"[39m[38;5;124m2[39m[38;5;124m"[39m: kappa_2[i]}
[1;32m    200[0m     surprise [38;5;241m=[39m surprise [38;5;241m+[39m (
[0;32m--> 201[0m         [43mHGF[49m[43m([49m
[1;32m    202[0m [43m            [49m[43minitial_mu[49m[38;5;241;43m=[39;49m[43minitial_mu[49m[43m,[49m
[1;32m    203[0m [43m            [49m[43minitial_pi[49m[38;5;241;43m=[39;49m[43minitial_pi[49m[43m,[49m
[1;32m    204[0m [43m            [49m[43momega[49m[38;5;241;43m=[39;49m[43momega[49m[43m,[49m
[1;32m    205[0m [43m            [49m[43momega_input[49m[38;5;241;43m=[39;49m[43momega_input[49m[43m[[49m[43mi[49m[43m][49m[43m,[49m
[1;32m    206[0m [43m            [49m[43mrho[49m[38;5;241;43m=[39;49m[43mrho[49m[43m,[49m
[1;32m    207[0m [43m            [49m[43mkappas[49m[38;5;241;43m=[39;49m[43mkappas[49m[43m,[49m
[1;32m    208[0m [43m            [49m[43mmodel_type[49m[38;5;241;43m=[39;49m[43mmodel_type[49m[43m,[49m
[1;32m    209[0m [43m            [49m[43mn_levels[49m[38;5;241;43m=[39;49m[43mn_levels[49m[43m,[49m
[1;32m    210[0m [43m            [49m[43meta0[49m[38;5;241;43m=[39;49m[38;5;241;43m0.0[39;49m[43m,[49m
[1;32m    211[0m [43m            [49m[43meta1[49m[38;5;241;43m=[39;49m[38;5;241;43m1.0[39;49m[43m,[49m
[1;32m    212[0m [43m            [49m[43mpihat[49m[38;5;241;43m=[39;49m[43mjnp[49m[38;5;241;43m.[39;49m[43minf[49m[43m,[49m
[1;32m    213[0m [43m            [49m[43mverbose[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[1;32m    214[0m [43m        [49m[43m)[49m
[1;32m    215[0m [43m        [49m[38;5;241;43m.[39;49m[43minput_data[49m[43m([49m[43minput_data[49m[38;5;241;43m=[39;49m[43minput_data[49m[43m[[49m[43mi[49m[43m][49m[43m,[49m[43m [49m[43mtime[49m[38;5;241;43m=[39;49m[43mtime[49m[43m[[49m[43mi[49m[43m][49m[43m)[49m
[1;32m    216[0m         [38;5;241m.[39msurprise(
[1;32m    217[0m             response_function[38;5;241m=[39mresponse_function,
[1;32m    218[0m             response_function_parameters[38;5;241m=[39mresponse_function_parameters,
[1;32m    219[0m         )
[1;32m    220[0m     )
[1;32m    222[0m [38;5;66;03m# Return the sum of the log probabilities (negative surprise)[39;00m

File [0;32m~/work/pyhgf/pyhgf/pyhgf/model.py:288[0m, in [0;36mHGF.input_data[0;34m(self, input_data, time)[0m
[1;32m    287[0m [38;5;28;01melif[39;00m [38;5;28mself[39m[38;5;241m.[39mmodel_type [38;5;241m==[39m [38;5;124m"[39m[38;5;124mbinary[39m[38;5;124m"[39m:
[0;32m--> 288[0m     _, scan_updates [38;5;241m=[39m [43mscan[49m[43m([49m[43mloop_binary_inputs[49m[43m,[49m[43m [49m[43mres_init[49m[43m,[49m[43m [49m[43mdata[49m[43m[[49m[38;5;241;43m1[39;49m[43m:[49m[43m,[49m[43m [49m[43m:[49m[43m][49m[43m)[49m
[1;32m    289[0m [38;5;28;01melse[39;00m:

    [0;31m[... skipping hidden 2 frame][0m

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/jax/_src/lax/control_flow/common.py:108[0m, in [0;36m_check_tree_and_avals[0;34m(what, tree1, avals1, tree2, avals2)[0m
[1;32m    106[0m diff [38;5;241m=[39m tree_map(_show_diff, tree_unflatten(tree1, avals1),
[1;32m    107[0m                 tree_unflatten(tree2, avals2))
[0;32m--> 108[0m [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mwhat[38;5;132;01m}[39;00m[38;5;124m must have identical types, got[39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00mdiff[38;5;132;01m}[39;00m[38;5;124m.[39m[38;5;124m"[39m)

[0;31mTypeError[0m: scan carry output and input must have identical types, got
(({'eta0': 'ShapedArray(float32[], weak_type=True)', 'eta1': 'ShapedArray(float32[], weak_type=True)', 'pihat': 'ShapedArray(float32[], weak_type=True)'}, (({'kappas': ('ShapedArray(float32[])',), 'mu': 'ShapedArray(float32[])', 'muhat': 'ShapedArray(float32[])', 'nu': 'ShapedArray(float32[], weak_type=True)', 'omega': 'ShapedArray(float32[])', 'pi': 'ShapedArray(float32[])', 'pihat': 'ShapedArray(float32[])', 'psis': None, 'rho': 'ShapedArray(float32[])'}, (({'kappas': None, 'mu': 'ShapedArray(float32[])', 'muhat': 'ShapedArray(float32[])', 'nu': 'ShapedArray(float32[])', 'omega': 'ShapedArray(float32[])', 'pi': 'ShapedArray(float32[])', 'pihat': 'ShapedArray(float32[])', 'psis': None, 'rho': 'ShapedArray(float32[])'}, None, None),), None),), None), {'surprise': 'ShapedArray(float32[])', 'time': 'ShapedArray(float32[])', 'value': 'DIFFERENT ShapedArray(float32[]) vs. ShapedArray(int32[])'}).

During handling of the above exception, another exception occurred:

[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[14], line 2[0m
[1;32m      1[0m [38;5;28;01mwith[39;00m two_levels_binary_hgf:
[0;32m----> 2[0m     two_level_hgf_idata [38;5;241m=[39m [43mpm[49m[38;5;241;43m.[39;49m[43msample[49m[43m([49m[43mchains[49m[38;5;241;43m=[39;49m[38;5;241;43m4[39;49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pymc/sampling/mcmc.py:461[0m, in [0;36msample[0;34m(draws, step, init, n_init, initvals, trace, chains, cores, tune, progressbar, model, random_seed, discard_tuned_samples, compute_convergence_checks, callback, jitter_max_retries, return_inferencedata, keep_warning_stat, idata_kwargs, mp_ctx, **kwargs)[0m
[1;32m    459[0m         [kwargs[38;5;241m.[39msetdefault(k, v) [38;5;28;01mfor[39;00m k, v [38;5;129;01min[39;00m nuts_kwargs[38;5;241m.[39mitems()]
[1;32m    460[0m     _log[38;5;241m.[39minfo([38;5;124m"[39m[38;5;124mAuto-assigning NUTS sampler...[39m[38;5;124m"[39m)
[0;32m--> 461[0m     initial_points, step [38;5;241m=[39m [43minit_nuts[49m[43m([49m
[1;32m    462[0m [43m        [49m[43minit[49m[38;5;241;43m=[39;49m[43minit[49m[43m,[49m
[1;32m    463[0m [43m        [49m[43mchains[49m[38;5;241;43m=[39;49m[43mchains[49m[43m,[49m
[1;32m    464[0m [43m        [49m[43mn_init[49m[38;5;241;43m=[39;49m[43mn_init[49m[43m,[49m
[1;32m    465[0m [43m        [49m[43mmodel[49m[38;5;241;43m=[39;49m[43mmodel[49m[43m,[49m
[1;32m    466[0m [43m        [49m[43mrandom_seed[49m[38;5;241;43m=[39;49m[43mrandom_seed_list[49m[43m,[49m
[1;32m    467[0m [43m        [49m[43mprogressbar[49m[38;5;241;43m=[39;49m[43mprogressbar[49m[43m,[49m
[1;32m    468[0m [43m        [49m[43mjitter_max_retries[49m[38;5;241;43m=[39;49m[43mjitter_max_retries[49m[43m,[49m
[1;32m    469[0m [43m        [49m[43mtune[49m[38;5;241;43m=[39;49m[43mtune[49m[43m,[49m
[1;32m    470[0m [43m        [49m[43minitvals[49m[38;5;241;43m=[39;49m[43minitvals[49m[43m,[49m
[1;32m    471[0m [43m        [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m,[49m
[1;32m    472[0m [43m    [49m[43m)[49m
[1;32m    474[0m [38;5;28;01mif[39;00m initial_points [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m    475[0m     [38;5;66;03m# Time to draw/evaluate numeric start points for each chain.[39;00m
[1;32m    476[0m     ipfns [38;5;241m=[39m make_initial_point_fns_per_chain(
[1;32m    477[0m         model[38;5;241m=[39mmodel,
[1;32m    478[0m         overrides[38;5;241m=[39minitvals,
[1;32m    479[0m         jitter_rvs[38;5;241m=[39m[38;5;28mset[39m(),
[1;32m    480[0m         chains[38;5;241m=[39mchains,
[1;32m    481[0m     )

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pymc/sampling/mcmc.py:1089[0m, in [0;36minit_nuts[0;34m(init, chains, n_init, model, random_seed, progressbar, jitter_max_retries, tune, initvals, **kwargs)[0m
[1;32m   1082[0m _log[38;5;241m.[39minfo([38;5;124mf[39m[38;5;124m"[39m[38;5;124mInitializing NUTS using [39m[38;5;132;01m{[39;00minit[38;5;132;01m}[39;00m[38;5;124m...[39m[38;5;124m"[39m)
[1;32m   1084[0m cb [38;5;241m=[39m [
[1;32m   1085[0m     pm[38;5;241m.[39mcallbacks[38;5;241m.[39mCheckParametersConvergence(tolerance[38;5;241m=[39m[38;5;241m1e-2[39m, diff[38;5;241m=[39m[38;5;124m"[39m[38;5;124mabsolute[39m[38;5;124m"[39m),
[1;32m   1086[0m     pm[38;5;241m.[39mcallbacks[38;5;241m.[39mCheckParametersConvergence(tolerance[38;5;241m=[39m[38;5;241m1e-2[39m, diff[38;5;241m=[39m[38;5;124m"[39m[38;5;124mrelative[39m[38;5;124m"[39m),
[1;32m   1087[0m ]
[0;32m-> 1089[0m initial_points [38;5;241m=[39m [43m_init_jitter[49m[43m([49m
[1;32m   1090[0m [43m    [49m[43mmodel[49m[43m,[49m
[1;32m   1091[0m [43m    [49m[43minitvals[49m[43m,[49m
[1;32m   1092[0m [43m    [49m[43mseeds[49m[38;5;241;43m=[39;49m[43mrandom_seed_list[49m[43m,[49m
[1;32m   1093[0m [43m    [49m[43mjitter[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mjitter[39;49m[38;5;124;43m"[39;49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43minit[49m[43m,[49m
[1;32m   1094[0m [43m    [49m[43mjitter_max_retries[49m[38;5;241;43m=[39;49m[43mjitter_max_retries[49m[43m,[49m
[1;32m   1095[0m [43m[49m[43m)[49m
[1;32m   1097[0m apoints [38;5;241m=[39m [DictToArrayBijection[38;5;241m.[39mmap(point) [38;5;28;01mfor[39;00m point [38;5;129;01min[39;00m initial_points]
[1;32m   1098[0m apoints_data [38;5;241m=[39m [apoint[38;5;241m.[39mdata [38;5;28;01mfor[39;00m apoint [38;5;129;01min[39;00m apoints]

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pymc/sampling/mcmc.py:983[0m, in [0;36m_init_jitter[0;34m(model, initvals, seeds, jitter, jitter_max_retries)[0m
[1;32m    981[0m [38;5;28;01mif[39;00m i [38;5;241m<[39m jitter_max_retries:
[1;32m    982[0m     [38;5;28;01mtry[39;00m:
[0;32m--> 983[0m         [43mmodel[49m[38;5;241;43m.[39;49m[43mcheck_start_vals[49m[43m([49m[43mpoint[49m[43m)[49m
[1;32m    984[0m     [38;5;28;01mexcept[39;00m SamplingError:
[1;32m    985[0m         [38;5;66;03m# Retry with a new seed[39;00m
[1;32m    986[0m         seed [38;5;241m=[39m rng[38;5;241m.[39mrandint([38;5;241m2[39m[38;5;241m*[39m[38;5;241m*[39m[38;5;241m30[39m, dtype[38;5;241m=[39mnp[38;5;241m.[39mint64)

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pymc/model.py:1765[0m, in [0;36mModel.check_start_vals[0;34m(self, start)[0m
[1;32m   1759[0m     valid_keys [38;5;241m=[39m [38;5;124m"[39m[38;5;124m, [39m[38;5;124m"[39m[38;5;241m.[39mjoin(value_names_set)
[1;32m   1760[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(
[1;32m   1761[0m         [38;5;124m"[39m[38;5;124mSome start parameters do not appear in the model![39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[1;32m   1762[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mValid keys are: [39m[38;5;132;01m{[39;00mvalid_keys[38;5;132;01m}[39;00m[38;5;124m, but [39m[38;5;132;01m{[39;00mextra_keys[38;5;132;01m}[39;00m[38;5;124m was supplied[39m[38;5;124m"[39m
[1;32m   1763[0m     )
[0;32m-> 1765[0m initial_eval [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mpoint_logps[49m[43m([49m[43mpoint[49m[38;5;241;43m=[39;49m[43melem[49m[43m)[49m
[1;32m   1767[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mall[39m(np[38;5;241m.[39misfinite(v) [38;5;28;01mfor[39;00m v [38;5;129;01min[39;00m initial_eval[38;5;241m.[39mvalues()):
[1;32m   1768[0m     [38;5;28;01mraise[39;00m SamplingError(
[1;32m   1769[0m         [38;5;124m"[39m[38;5;124mInitial evaluation of model at starting point failed![39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[1;32m   1770[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mStarting values:[39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00melem[38;5;132;01m}[39;00m[38;5;130;01m\n[39;00m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[1;32m   1771[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mInitial evaluation results:[39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00minitial_eval[38;5;132;01m}[39;00m[38;5;124m"[39m
[1;32m   1772[0m     )

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pymc/model.py:1799[0m, in [0;36mModel.point_logps[0;34m(self, point, round_vals)[0m
[1;32m   1793[0m factors [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mbasic_RVs [38;5;241m+[39m [38;5;28mself[39m[38;5;241m.[39mpotentials
[1;32m   1794[0m factor_logps_fn [38;5;241m=[39m [at[38;5;241m.[39msum(factor) [38;5;28;01mfor[39;00m factor [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mlogp(factors, [38;5;28msum[39m[38;5;241m=[39m[38;5;28;01mFalse[39;00m)]
[1;32m   1795[0m [38;5;28;01mreturn[39;00m {
[1;32m   1796[0m     factor[38;5;241m.[39mname: np[38;5;241m.[39mround(np[38;5;241m.[39masarray(factor_logp), round_vals)
[1;32m   1797[0m     [38;5;28;01mfor[39;00m factor, factor_logp [38;5;129;01min[39;00m [38;5;28mzip[39m(
[1;32m   1798[0m         factors,
[0;32m-> 1799[0m         [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcompile_fn[49m[43m([49m[43mfactor_logps_fn[49m[43m)[49m[43m([49m[43mpoint[49m[43m)[49m,
[1;32m   1800[0m     )
[1;32m   1801[0m }

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pymc/pytensorf.py:764[0m, in [0;36mPointFunc.__call__[0;34m(self, state)[0m
[1;32m    763[0m [38;5;28;01mdef[39;00m [38;5;21m__call__[39m([38;5;28mself[39m, state):
[0;32m--> 764[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mf[49m[43m([49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mstate[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pytensor/compile/function/types.py:985[0m, in [0;36mFunction.__call__[0;34m(self, *args, **kwargs)[0m
[1;32m    983[0m     [38;5;28;01mif[39;00m [38;5;28mhasattr[39m([38;5;28mself[39m[38;5;241m.[39mvm, [38;5;124m"[39m[38;5;124mthunks[39m[38;5;124m"[39m):
[1;32m    984[0m         thunk [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mvm[38;5;241m.[39mthunks[[38;5;28mself[39m[38;5;241m.[39mvm[38;5;241m.[39mposition_of_error]
[0;32m--> 985[0m     [43mraise_with_op[49m[43m([49m
[1;32m    986[0m [43m        [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mmaker[49m[38;5;241;43m.[39;49m[43mfgraph[49m[43m,[49m
[1;32m    987[0m [43m        [49m[43mnode[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mvm[49m[38;5;241;43m.[39;49m[43mnodes[49m[43m[[49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mvm[49m[38;5;241;43m.[39;49m[43mposition_of_error[49m[43m][49m[43m,[49m
[1;32m    988[0m [43m        [49m[43mthunk[49m[38;5;241;43m=[39;49m[43mthunk[49m[43m,[49m
[1;32m    989[0m [43m        [49m[43mstorage_map[49m[38;5;241;43m=[39;49m[38;5;28;43mgetattr[39;49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mvm[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mstorage_map[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m    990[0m [43m    [49m[43m)[49m
[1;32m    991[0m [38;5;28;01melse[39;00m:
[1;32m    992[0m     [38;5;66;03m# old-style linkers raise their own exceptions[39;00m
[1;32m    993[0m     [38;5;28;01mraise[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pytensor/link/utils.py:536[0m, in [0;36mraise_with_op[0;34m(fgraph, node, thunk, exc_info, storage_map)[0m
[1;32m    531[0m     warnings[38;5;241m.[39mwarn(
[1;32m    532[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mexc_type[38;5;132;01m}[39;00m[38;5;124m error does not allow us to add an extra error message[39m[38;5;124m"[39m
[1;32m    533[0m     )
[1;32m    534[0m     [38;5;66;03m# Some exception need extra parameter in inputs. So forget the[39;00m
[1;32m    535[0m     [38;5;66;03m# extra long error message in that case.[39;00m
[0;32m--> 536[0m [38;5;28;01mraise[39;00m exc_value[38;5;241m.[39mwith_traceback(exc_trace)

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pytensor/compile/function/types.py:972[0m, in [0;36mFunction.__call__[0;34m(self, *args, **kwargs)[0m
[1;32m    969[0m t0_fn [38;5;241m=[39m time[38;5;241m.[39mperf_counter()
[1;32m    970[0m [38;5;28;01mtry[39;00m:
[1;32m    971[0m     outputs [38;5;241m=[39m (
[0;32m--> 972[0m         [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mvm[49m[43m([49m[43m)[49m
[1;32m    973[0m         [38;5;28;01mif[39;00m output_subset [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m
[1;32m    974[0m         [38;5;28;01melse[39;00m [38;5;28mself[39m[38;5;241m.[39mvm(output_subset[38;5;241m=[39moutput_subset)
[1;32m    975[0m     )
[1;32m    976[0m [38;5;28;01mexcept[39;00m [38;5;167;01mException[39;00m:
[1;32m    977[0m     restore_defaults()

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pytensor/graph/op.py:544[0m, in [0;36mOp.make_py_thunk.<locals>.rval[0;34m(p, i, o, n, params)[0m
[1;32m    540[0m [38;5;129m@is_thunk_type[39m
[1;32m    541[0m [38;5;28;01mdef[39;00m [38;5;21mrval[39m(
[1;32m    542[0m     p[38;5;241m=[39mp, i[38;5;241m=[39mnode_input_storage, o[38;5;241m=[39mnode_output_storage, n[38;5;241m=[39mnode, params[38;5;241m=[39m[38;5;28;01mNone[39;00m
[1;32m    543[0m ):
[0;32m--> 544[0m     r [38;5;241m=[39m [43mp[49m[43m([49m[43mn[49m[43m,[49m[43m [49m[43m[[49m[43mx[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mx[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mi[49m[43m][49m[43m,[49m[43m [49m[43mo[49m[43m)[49m
[1;32m    545[0m     [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m node[38;5;241m.[39moutputs:
[1;32m    546[0m         compute_map[o][[38;5;241m0[39m] [38;5;241m=[39m [38;5;28;01mTrue[39;00m

File [0;32m~/work/pyhgf/pyhgf/pyhgf/distribution.py:520[0m, in [0;36mHGFDistribution.perform[0;34m(self, node, inputs, outputs)[0m
[1;32m    518[0m [38;5;28;01mdef[39;00m [38;5;21mperform[39m([38;5;28mself[39m, node, inputs, outputs):
[1;32m    519[0m [38;5;250m    [39m[38;5;124;03m"""Run the function forward."""[39;00m
[0;32m--> 520[0m     result [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mhgf_logp[49m[43m([49m[38;5;241;43m*[39;49m[43minputs[49m[43m)[49m
[1;32m    521[0m     outputs[[38;5;241m0[39m][[38;5;241m0[39m] [38;5;241m=[39m np[38;5;241m.[39masarray(result, dtype[38;5;241m=[39mnode[38;5;241m.[39moutputs[[38;5;241m0[39m][38;5;241m.[39mdtype)

    [0;31m[... skipping hidden 12 frame][0m

File [0;32m~/work/pyhgf/pyhgf/pyhgf/distribution.py:201[0m, in [0;36mhgf_logp[0;34m(omega_1, omega_2, omega_3, omega_input, rho_1, rho_2, rho_3, pi_1, pi_2, pi_3, mu_1, mu_2, mu_3, kappa_1, kappa_2, input_data, response_function, model_type, n_levels, response_function_parameters, time)[0m
[1;32m    197[0m     rho: Dict[[38;5;28mstr[39m, Optional[[38;5;28mfloat[39m]] [38;5;241m=[39m {[38;5;124m"[39m[38;5;124m1[39m[38;5;124m"[39m: rho_1[i], [38;5;124m"[39m[38;5;124m2[39m[38;5;124m"[39m: rho_2[i], [38;5;124m"[39m[38;5;124m3[39m[38;5;124m"[39m: rho_3[i]}
[1;32m    198[0m     kappas: Dict[[38;5;28mstr[39m, Optional[[38;5;28mfloat[39m]] [38;5;241m=[39m {[38;5;124m"[39m[38;5;124m1[39m[38;5;124m"[39m: kappa_1[i], [38;5;124m"[39m[38;5;124m2[39m[38;5;124m"[39m: kappa_2[i]}
[1;32m    200[0m     surprise [38;5;241m=[39m surprise [38;5;241m+[39m (
[0;32m--> 201[0m         [43mHGF[49m[43m([49m
[1;32m    202[0m [43m            [49m[43minitial_mu[49m[38;5;241;43m=[39;49m[43minitial_mu[49m[43m,[49m
[1;32m    203[0m [43m            [49m[43minitial_pi[49m[38;5;241;43m=[39;49m[43minitial_pi[49m[43m,[49m
[1;32m    204[0m [43m            [49m[43momega[49m[38;5;241;43m=[39;49m[43momega[49m[43m,[49m
[1;32m    205[0m [43m            [49m[43momega_input[49m[38;5;241;43m=[39;49m[43momega_input[49m[43m[[49m[43mi[49m[43m][49m[43m,[49m
[1;32m    206[0m [43m            [49m[43mrho[49m[38;5;241;43m=[39;49m[43mrho[49m[43m,[49m
[1;32m    207[0m [43m            [49m[43mkappas[49m[38;5;241;43m=[39;49m[43mkappas[49m[43m,[49m
[1;32m    208[0m [43m            [49m[43mmodel_type[49m[38;5;241;43m=[39;49m[43mmodel_type[49m[43m,[49m
[1;32m    209[0m [43m            [49m[43mn_levels[49m[38;5;241;43m=[39;49m[43mn_levels[49m[43m,[49m
[1;32m    210[0m [43m            [49m[43meta0[49m[38;5;241;43m=[39;49m[38;5;241;43m0.0[39;49m[43m,[49m
[1;32m    211[0m [43m            [49m[43meta1[49m[38;5;241;43m=[39;49m[38;5;241;43m1.0[39;49m[43m,[49m
[1;32m    212[0m [43m            [49m[43mpihat[49m[38;5;241;43m=[39;49m[43mjnp[49m[38;5;241;43m.[39;49m[43minf[49m[43m,[49m
[1;32m    213[0m [43m            [49m[43mverbose[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[1;32m    214[0m [43m        [49m[43m)[49m
[1;32m    215[0m [43m        [49m[38;5;241;43m.[39;49m[43minput_data[49m[43m([49m[43minput_data[49m[38;5;241;43m=[39;49m[43minput_data[49m[43m[[49m[43mi[49m[43m][49m[43m,[49m[43m [49m[43mtime[49m[38;5;241;43m=[39;49m[43mtime[49m[43m[[49m[43mi[49m[43m][49m[43m)[49m
[1;32m    216[0m         [38;5;241m.[39msurprise(
[1;32m    217[0m             response_function[38;5;241m=[39mresponse_function,
[1;32m    218[0m             response_function_parameters[38;5;241m=[39mresponse_function_parameters,
[1;32m    219[0m         )
[1;32m    220[0m     )
[1;32m    222[0m [38;5;66;03m# Return the sum of the log probabilities (negative surprise)[39;00m
[1;32m    223[0m [38;5;28;01mreturn[39;00m [38;5;241m-[39msurprise

File [0;32m~/work/pyhgf/pyhgf/pyhgf/model.py:288[0m, in [0;36mHGF.input_data[0;34m(self, input_data, time)[0m
[1;32m    286[0m     _, scan_updates [38;5;241m=[39m scan(loop_continuous_inputs, res_init, data[[38;5;241m1[39m:, :])
[1;32m    287[0m [38;5;28;01melif[39;00m [38;5;28mself[39m[38;5;241m.[39mmodel_type [38;5;241m==[39m [38;5;124m"[39m[38;5;124mbinary[39m[38;5;124m"[39m:
[0;32m--> 288[0m     _, scan_updates [38;5;241m=[39m [43mscan[49m[43m([49m[43mloop_binary_inputs[49m[43m,[49m[43m [49m[43mres_init[49m[43m,[49m[43m [49m[43mdata[49m[43m[[49m[38;5;241;43m1[39;49m[43m:[49m[43m,[49m[43m [49m[43m:[49m[43m][49m[43m)[49m
[1;32m    289[0m [38;5;28;01melse[39;00m:
[1;32m    290[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m"[39m[38;5;124mThis method only works with binary or continuous models[39m[38;5;124m"[39m)

    [0;31m[... skipping hidden 2 frame][0m

File [0;32m/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/jax/_src/lax/control_flow/common.py:108[0m, in [0;36m_check_tree_and_avals[0;34m(what, tree1, avals1, tree2, avals2)[0m
[1;32m    105[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mall[39m([38;5;28mmap[39m(core[38;5;241m.[39mtypematch, avals1, avals2)):
[1;32m    106[0m   diff [38;5;241m=[39m tree_map(_show_diff, tree_unflatten(tree1, avals1),
[1;32m    107[0m                   tree_unflatten(tree2, avals2))
[0;32m--> 108[0m   [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mwhat[38;5;132;01m}[39;00m[38;5;124m must have identical types, got[39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00mdiff[38;5;132;01m}[39;00m[38;5;124m.[39m[38;5;124m"[39m)

[0;31mTypeError[0m: scan carry output and input must have identical types, got
(({'eta0': 'ShapedArray(float32[], weak_type=True)', 'eta1': 'ShapedArray(float32[], weak_type=True)', 'pihat': 'ShapedArray(float32[], weak_type=True)'}, (({'kappas': ('ShapedArray(float32[])',), 'mu': 'ShapedArray(float32[])', 'muhat': 'ShapedArray(float32[])', 'nu': 'ShapedArray(float32[], weak_type=True)', 'omega': 'ShapedArray(float32[])', 'pi': 'ShapedArray(float32[])', 'pihat': 'ShapedArray(float32[])', 'psis': None, 'rho': 'ShapedArray(float32[])'}, (({'kappas': None, 'mu': 'ShapedArray(float32[])', 'muhat': 'ShapedArray(float32[])', 'nu': 'ShapedArray(float32[])', 'omega': 'ShapedArray(float32[])', 'pi': 'ShapedArray(float32[])', 'pihat': 'ShapedArray(float32[])', 'psis': None, 'rho': 'ShapedArray(float32[])'}, None, None),), None),), None), {'surprise': 'ShapedArray(float32[])', 'time': 'ShapedArray(float32[])', 'value': 'DIFFERENT ShapedArray(float32[]) vs. ShapedArray(int32[])'}).
Apply node that caused the error: HGFDistribution(TensorConstant{nan}, omega_2, TensorConstant{nan}, TensorConstant{nan}, TensorConstant{0.0}, TensorConstant{0.0}, TensorConstant{nan}, TensorConstant{0.0}, TensorConstant{10000.0}, TensorConstant{nan}, TensorConstant{nan}, TensorConstant{0.0}, TensorConstant{nan}, TensorConstant{1.0}, TensorConstant{nan})
Toposort index: 1
Inputs types: [TensorType(float64, ()), TensorType(float64, (10,)), TensorType(float64, ()), TensorType(float64, ()), TensorType(float32, ()), TensorType(float32, ()), TensorType(float64, ()), TensorType(float32, ()), TensorType(float32, ()), TensorType(float64, ()), TensorType(float64, ()), TensorType(float32, ()), TensorType(float64, ()), TensorType(float32, ()), TensorType(float64, ())]
Inputs shapes: [(), (10,), (), (), (), (), (), (), (), (), (), (), (), (), ()]
Inputs strides: [(), (8,), (), (), (), (), (), (), (), (), (), (), (), (), ()]
Inputs values: [array(nan), 'not shown', array(nan), array(nan), array(0., dtype=float32), array(0., dtype=float32), array(nan), array(0., dtype=float32), array(10000., dtype=float32), array(nan), array(nan), array(0., dtype=float32), array(nan), array(1., dtype=float32), array(nan)]
Outputs clients: [['output']]

Backtrace when the node is created (use PyTensor flag traceback__limit=N to make it longer):
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3016, in _run_cell
    result = runner(coro)
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/IPython/core/async_helpers.py", line 129, in _pseudo_sync_runner
    coro.send(None)
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3221, in run_cell_async
    has_raised = await self.run_ast_nodes(code_ast.body, cell_name,
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3400, in run_ast_nodes
    if await self.run_code(code, result, async_=asy):
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3460, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "/tmp/ipykernel_2418/2414223990.py", line 7, in <module>
    hgf_logp_op(
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pytensor/graph/op.py", line 296, in __call__
    node = self.make_node(*inputs, **kwargs)
  File "/home/runner/work/pyhgf/pyhgf/pyhgf/distribution.py", line 515, in make_node
    outputs = [pt.dscalar()]

HINT: Use the PyTensor flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node.
TypeError: scan carry output and input must have identical types, got
(({'eta0': 'ShapedArray(float32[], weak_type=True)', 'eta1': 'ShapedArray(float32[], weak_type=True)', 'pihat': 'ShapedArray(float32[], weak_type=True)'}, (({'kappas': ('ShapedArray(float32[])',), 'mu': 'ShapedArray(float32[])', 'muhat': 'ShapedArray(float32[])', 'nu': 'ShapedArray(float32[], weak_type=True)', 'omega': 'ShapedArray(float32[])', 'pi': 'ShapedArray(float32[])', 'pihat': 'ShapedArray(float32[])', 'psis': None, 'rho': 'ShapedArray(float32[])'}, (({'kappas': None, 'mu': 'ShapedArray(float32[])', 'muhat': 'ShapedArray(float32[])', 'nu': 'ShapedArray(float32[])', 'omega': 'ShapedArray(float32[])', 'pi': 'ShapedArray(float32[])', 'pihat': 'ShapedArray(float32[])', 'psis': None, 'rho': 'ShapedArray(float32[])'}, None, None),), None),), None), {'surprise': 'ShapedArray(float32[])', 'time': 'ShapedArray(float32[])', 'value': 'DIFFERENT ShapedArray(float32[]) vs. ShapedArray(int32[])'}).
Apply node that caused the error: HGFDistribution(TensorConstant{nan}, omega_2, TensorConstant{nan}, TensorConstant{nan}, TensorConstant{0.0}, TensorConstant{0.0}, TensorConstant{nan}, TensorConstant{0.0}, TensorConstant{10000.0}, TensorConstant{nan}, TensorConstant{nan}, TensorConstant{0.0}, TensorConstant{nan}, TensorConstant{1.0}, TensorConstant{nan})
Toposort index: 1
Inputs types: [TensorType(float64, ()), TensorType(float64, (10,)), TensorType(float64, ()), TensorType(float64, ()), TensorType(float32, ()), TensorType(float32, ()), TensorType(float64, ()), TensorType(float32, ()), TensorType(float32, ()), TensorType(float64, ()), TensorType(float64, ()), TensorType(float32, ()), TensorType(float64, ()), TensorType(float32, ()), TensorType(float64, ())]
Inputs shapes: [(), (10,), (), (), (), (), (), (), (), (), (), (), (), (), ()]
Inputs strides: [(), (8,), (), (), (), (), (), (), (), (), (), (), (), (), ()]
Inputs values: [array(nan), 'not shown', array(nan), array(nan), array(0., dtype=float32), array(0., dtype=float32), array(nan), array(0., dtype=float32), array(10000., dtype=float32), array(nan), array(nan), array(0., dtype=float32), array(nan), array(1., dtype=float32), array(nan)]
Outputs clients: [['output']]

Backtrace when the node is created (use PyTensor flag traceback__limit=N to make it longer):
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3016, in _run_cell
    result = runner(coro)
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/IPython/core/async_helpers.py", line 129, in _pseudo_sync_runner
    coro.send(None)
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3221, in run_cell_async
    has_raised = await self.run_ast_nodes(code_ast.body, cell_name,
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3400, in run_ast_nodes
    if await self.run_code(code, result, async_=asy):
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3460, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "/tmp/ipykernel_2418/2414223990.py", line 7, in <module>
    hgf_logp_op(
  File "/opt/hostedtoolcache/Python/3.10.9/x64/lib/python3.10/site-packages/pytensor/graph/op.py", line 296, in __call__
    node = self.make_node(*inputs, **kwargs)
  File "/home/runner/work/pyhgf/pyhgf/pyhgf/distribution.py", line 515, in make_node
    outputs = [pt.dscalar()]

HINT: Use the PyTensor flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node.

