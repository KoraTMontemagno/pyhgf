{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "849911a6-bc50-4ceb-9dc3-b27b4b0a2a61",
   "metadata": {},
   "source": [
    "(interactive_hgf)=\n",
    "# Interactive visualization of the Hierarchical Gaussian Filter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b430a3fe-9d81-4f82-b3a6-f0a2244996e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)\n"
     ]
    }
   ],
   "source": [
    "from ghgf.model import HGF\n",
    "import jax.numpy as jnp\n",
    "from ghgf import load_data\n",
    "import matplotlib.pyplot as plt\n",
    "import ipywidgets as widgets\n",
    "\n",
    "%matplotlib widget"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e59442a-05c5-46bb-aff0-d7c3767b97c3",
   "metadata": {},
   "source": [
    "## Binary HGF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "760d0534-14ac-4b7d-bb64-b4fe2a0860b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import the binary time series example\n",
    "binaryseries = load_data(\"binary\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ebc3776-6d81-4aa0-aff7-d4fc7dcc7df0",
   "metadata": {},
   "source": [
    "### 2-levels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5a826b03-cba8-4671-8ccc-b84402f3a7e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f7670da3772c400d8c5b511cb14247c9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=-2.0, description='omega_2', max=0.0, min=-3.5), Output()), _dom_class…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "_, axs = plt.subplots(nrows=3, figsize=(16, 7), sharex=True)\n",
    "\n",
    "@widgets.interact(omega_2=(-3.5, 0.0, .1))\n",
    "def update(omega_2 = -2.0):\n",
    "    for ax in axs:\n",
    "        ax.cla()\n",
    "\n",
    "    # create, fit and plot a binary HGF\n",
    "    HGF(\n",
    "        n_levels=2,\n",
    "        model_type=\"binary\",\n",
    "        initial_mu={\"1\": .0, \"2\": .5},\n",
    "        initial_pi={\"1\": .0, \"2\": 1e4},\n",
    "        omega={\"1\": None, \"2\": omega_2},\n",
    "        rho={\"1\": None, \"2\": 0.0},\n",
    "        kappas={\"1\": None},\n",
    "        eta0=0.0,\n",
    "        eta1=1.0,\n",
    "        pihat = jnp.inf,\n",
    "        verbose=False\n",
    "    ).input_data(input_data=binaryseries).plot_trajectories(axs=axs)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d04f7ff8-ba5b-4bf3-aaa8-e3a462b9b494",
   "metadata": {},
   "source": [
    "## 3-levels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "04760217-0cf3-49b1-870b-764d622c1c46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dfadf9170b854a4b8ca3d597184f924f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=-3.0, description='omega_2', max=5.0, min=-10.0), FloatSlider(value=-3…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "_, axs = plt.subplots(nrows=4, figsize=(16, 7), sharex=True)\n",
    "\n",
    "@widgets.interact(omega_2=(-10.0, 5.0, .1), omega_3=(-10.0, 5.0, .1))\n",
    "def update(omega_2 = -3.0, omega_3 = -3.0):\n",
    "    for ax in axs:\n",
    "        ax.cla()\n",
    "\n",
    "    # create, fit and plot a binary HGF\n",
    "    HGF(\n",
    "        n_levels=3,\n",
    "        model_type=\"binary\",\n",
    "        initial_mu={\"1\": .0, \"2\": .5, \"3\": 0.},\n",
    "        initial_pi={\"1\": .0, \"2\": 1e4, \"3\": 1e1},\n",
    "        omega={\"1\": None, \"2\": omega_2, \"3\": omega_3},\n",
    "        rho={\"1\": None, \"2\": 0.0, \"3\": 0.0},\n",
    "        kappas={\"1\": None, \"2\": 1.0},\n",
    "        eta0=0.0,\n",
    "        eta1=1.0,\n",
    "        pihat = jnp.inf,\n",
    "        verbose=False\n",
    "    ).input_data(input_data=binaryseries).plot_trajectories(axs=axs)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36dfd7eb-c405-4c90-a070-4ecdc466e9c3",
   "metadata": {},
   "source": [
    "## Continuous HGF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ba649048-7989-4cbf-b4d5-360a17aa060e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import the exchange rate time series\n",
    "timeserie = load_data(\"continuous\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b26dde7-0648-42a4-b29e-8a0870eb4ff1",
   "metadata": {},
   "source": [
    "### 2-levels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2137b81a-ae46-44af-a644-8726c122b051",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fe23e0e832b342d0838a67b6141ba103",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=-11.0, description='omega_1', max=5.0, min=-15.0), FloatSlider(value=-…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "_, axs = plt.subplots(nrows=3, figsize=(16, 7), sharex=True)\n",
    "\n",
    "@widgets.interact(omega_1=(-15.0, 5.0, .1), omega_2=(-15.0, 5.0, .1))\n",
    "def update(omega_1 = -11.0, omega_2 = -3.0):\n",
    "    for ax in axs:\n",
    "        ax.cla()\n",
    "\n",
    "    # create, fit and plot a binary HGF\n",
    "    HGF(\n",
    "        n_levels=2,\n",
    "        model_type=\"continuous\",\n",
    "        initial_mu={\"1\": 1.04, \"2\": 0.0},\n",
    "        initial_pi={\"1\": 1e4, \"2\": 1e1},\n",
    "        omega={\"1\": omega_1, \"2\": omega_2},\n",
    "        rho={\"1\": 0.0, \"2\": 0.0},\n",
    "        kappas={\"1\": 1.0},\n",
    "        verbose=False\n",
    "    ).input_data(input_data=timeserie).plot_trajectories(axs=axs)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bd92e3e-dea9-42e7-9bea-9e4b53e95ac1",
   "metadata": {},
   "source": [
    "### 3-levels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "584dbc95-bc7e-42af-9b3a-c0e09b4e4af6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "49fdbc54bdc74555aab05a52ee92ffc2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=-11.0, description='omega_1', max=5.0, min=-15.0), FloatSlider(value=-…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "_, axs = plt.subplots(nrows=4, figsize=(16, 7), sharex=True)\n",
    "\n",
    "@widgets.interact(omega_1=(-15.0, 5.0, .1), omega_2=(-15.0, 5.0, .1), omega_3=(-15.0, 5.0, .1))\n",
    "def update(omega_1 = -11.0, omega_2 = -3.0, omega_3 = -3.0):\n",
    "    for ax in axs:\n",
    "        ax.cla()\n",
    "\n",
    "    # create, fit and plot a binary HGF\n",
    "    HGF(\n",
    "        n_levels=3,\n",
    "        model_type=\"continuous\",\n",
    "        initial_mu={\"1\": 1.04, \"2\": 0.0, \"3\": 0.0},\n",
    "        initial_pi={\"1\": 1e4, \"2\": 1e1, \"3\": 1e1},\n",
    "        omega={\"1\": omega_1, \"2\": omega_2, \"3\": omega_3},\n",
    "        rho={\"1\": 0.0, \"2\": 0.0, \"3\": 0.0},\n",
    "        kappas={\"1\": 1.0, \"2\": 1.0},\n",
    "        verbose=False\n",
    "    ).input_data(input_data=timeserie).plot_trajectories(axs=axs)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f8939a1-b9b9-4003-8e15-bd8c58a53afc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
